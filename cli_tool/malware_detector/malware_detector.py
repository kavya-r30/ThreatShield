import requests
import time
import json
import os

def start():
    """
    Checks the health status of the ThreatShield API and waits until it's healthy.
    Returns True as soon as the API reports a healthy status, with a maximum wait time of 51 seconds.
    """
    url = "https://threatshield-org-admins.onrender.com/api/health"
    start_time = time.time()
    max_wait_time = 51  # seconds
    
    while time.time() - start_time < max_wait_time:
        try:
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                if data.get("status") == "healthy":
                    return True
        except Exception as e:
            print(f"Error checking health status: {e}")
        
        # Wait before trying again
        time.sleep(2)
    
    raise TimeoutError("Failed to get a healthy status within the maximum wait time")

def generate_reports(file_path):
    """
    Uploads the file to the ThreatShield API for malware analysis.
    Returns both the JSON analysis report and a human-readable report from the API.
    
    Args:
        file_path: Path to the file to be analyzed
        
    Returns:
        tuple: (json_report, human_report)
    """
    analysis_url = "https://threatshield-org-admins.onrender.com/api/analyze"
    report_url = "https://threatshield-org-admins.onrender.com/api/human-report"

    with open(file_path, "rb") as file:
        files = {"file": (os.path.basename(file_path), file)}
        response = requests.post(analysis_url, files=files)

    if response.status_code != 200:
        raise Exception(f"Analysis request failed with status code {response.status_code}: {response.text}")
    
    # Get the JSON report from the API
    json_report = response.json()

    # Send the analysis JSON to the human-report endpoint
    report_response = requests.post(report_url, json=json_report)

    if report_response.status_code != 200:
        raise Exception(f"Human-readable report generation failed with status code {report_response.status_code}: {report_response.text}")

    # Extract human-readable report from the response
    human_report = report_response.json().get("report", "No report generated.")

    return json_report, human_report
